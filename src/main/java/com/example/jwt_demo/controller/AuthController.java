package com.example.jwt_demo.controller;
import java.util.HashMap;
import java.util.Map;

import com.example.jwt_demo.model.User;
import com.example.jwt_demo.repository.UserRepository;
import com.example.jwt_demo.security.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.*;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.http.HttpStatus;
import org.springframework.web.server.ResponseStatusException;



import java.util.List;

@RestController
@RequestMapping("/api/auth")
public class AuthController {

    @Autowired
    AuthenticationManager authenticationManager;
    @Autowired
    UserRepository userRepository;
    @Autowired
    PasswordEncoder encoder;
    @Autowired
    JwtUtil jwtUtils;

    @PostMapping("/signin")
    public String authenticateUser(@RequestBody User user) {
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        user.getUsername(),
                        user.getPassword())
        );
        UserDetails userDetails = (UserDetails) authentication.getPrincipal();
        return jwtUtils.generateToken(userDetails.getUsername());
    }

    @PostMapping("/signup")
    public String registerUser(@RequestBody User user) {
        if (userRepository.existsByUsername(user.getUsername())) {
            return "Error: Email is already taken!";
        }
        // Create new user's account with additional fields
        User newUser = new User(
                null, // Auto-generated by database
                user.getUsername(),
                encoder.encode(user.getPassword()),
                user.getName(),
                user.getLastname(),
                user.getCity(),
                user.getAge(),
                user.getGender(),
                user.getLanguages(),
                user.getHobbies(),
                user.getImage(),
                user.getAboutme()
        );
        userRepository.save(newUser);
        return "User registered successfully!";
    }

    @GetMapping("/all")
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    @DeleteMapping("/delete/{id}")
    public String deleteUserById(@PathVariable Long id) {
        if (userRepository.existsById(id)) {
            userRepository.deleteById(id);
            return "User deleted successfully!";
        } else {
            return "Error: User not found!";
        }
    }

//    /users/{id}: which returns the user's name and link to the profile picture.
//      /me: which is a shortcut to /users/{id}
    @GetMapping("/users/{id}")
    public Map<String, Object> getUserById(@PathVariable Long id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found"));

        Map<String, Object> response = new HashMap<>();
        response.put("name", user.getName());
        response.put("image", user.getImage());

        return response;
    }

    // BY ADDING BEARER OF USER
    @GetMapping("/me")
    public User getMe() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); // Import this line
        if (authentication != null && authentication.isAuthenticated()) {
            String username = ((UserDetails) authentication.getPrincipal()).getUsername();
            return userRepository.findByUsername(username);
        }
        return null;
    }

    // /users/{id}/profile: which returns the users "about me" type information.

    @GetMapping("/users/{id}/profile")
    public Map<String, Object> getUserProfileById(@PathVariable Long id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found"));

        Map<String, Object> response = new HashMap<>();
        response.put("name", user.getName());
        response.put("lastname", user.getLastname());
        response.put("languages", user.getLanguages());
        response.put("aboutme", user.getAboutme());

        return response;
    }
//    you should also implement /me/profile
@GetMapping("/me/profile")
public Map<String, Object> getMyProfile() {
    Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); // Import this line
    if (authentication != null && authentication.isAuthenticated()) {
        String username = ((UserDetails) authentication.getPrincipal()).getUsername();
        User user = userRepository.findByUsername(username);

        Map<String, Object> response = new HashMap<>();
        response.put("name", user.getName());
        response.put("lastname", user.getLastname());
        response.put("languages", user.getLanguages());
        response.put("aboutme", user.getAboutme());

        return response;
    }
    throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "User not authenticated");
}

// /users/{id}/bio: which returns the users biographical data (the data used to power recommendations).

    @GetMapping("/users/{id}/bio")
    public Map<String, Object> getUserBioById(@PathVariable Long id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found"));

        Map<String, Object> response = new HashMap<>();
        response.put("name", user.getName());
        response.put("lastname", user.getLastname());
        response.put("city", user.getCity());
        response.put("age", user.getAge());
        response.put("genres", user.getGender());
        response.put("hobbies", user.getHobbies());

        return response;
    }
// You should also implement /me/bio.
@GetMapping("/me/bio")
public Map<String, Object> getMyBio() {
    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

    if (authentication != null && authentication.isAuthenticated()) {
        String username = ((UserDetails) authentication.getPrincipal()).getUsername();
        User user = userRepository.findByUsername(username);

        // Check if user is null (not found)
        if (user == null) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "User not authenticated");
        }

        Map<String, Object> response = new HashMap<>();
        response.put("name", user.getName());
        response.put("lastname", user.getLastname());
        response.put("city", user.getCity());
        response.put("age", user.getAge());
        response.put("gender", user.getGender());
        response.put("hobbies", user.getHobbies());

        return response;
    }
    throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "User not authenticated");
}

}
